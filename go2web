#! /usr/bin/env bash
import socket
import validators
import ssl
import json
import os

from bs4 import BeautifulSoup

KNOWN_FLAGS = ["-u", "-s", "-h", "-b", "-f"]

class Colors:
    HEADER = '\033[95m'
    BLUE = '\033[94m'
    CYAN = '\033[96m'
    GREEN = '\033[92m'
    FAIL = '\033[91m'
    ENDCOLOR = '\033[0m'
    BOLD = '\033[1m'
    UNDERLINE = '\033[4m'

visited_urls = []
forward_navigation_urls = []

def printColoredText(text, color, end="\n"):
    print(color + text + Colors.ENDCOLOR, end=end) 

def help():
    printColoredText("Available commands are:\n\
            go2web -u <URL>         # make an HTTP request to URL and print the response\n\
            go2web -s <search-term> # search the term and print top 10 results\n\
            go2web -h               # show help\n\
            go2web -b               # navigate back\n\
            go2web -f               # navigate forward", Colors.GREEN)
 
def search(searchTerm):
    request_url = f"/customsearch/v1?key=AIzaSyD1TY-uJDXAl4m01lCC-orZUfga_D2e_zw&cx=f2ff5f215d5484786&q={searchTerm}&start=1&num=10"
    request = "GET " + request_url + " HTTP/1.1\r\nConnection:close\r\nHost:www.googleapis.com\r\n\r\n"

    with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as client:
        sslClient = ssl.wrap_socket(client)

        # connect the client 
        sslClient.connect(("www.googleapis.com", 443))  
        
        # send request 
        sslClient.send(request.encode())  

        chunks = []
        while True:
            data = sslClient.recv(2048)
            if not data:
                break
            chunks.append(data.decode())       
        stringResult = ''.join(chunks)

        response = stringResult[stringResult.find("{"):].replace("\n", "").replace("\r", "")[:-1]
        jsonResult = json.loads(response)
        for index, item in enumerate(jsonResult["items"]):
            print(str(index + 1), end=". ")
            printColoredText(item["title"], Colors.UNDERLINE)
        
        
        while True:
            printColoredText("Type a number from 1 to 10, if you want to open a link, type 'q' otherwise", Colors.GREEN)
            printColoredText("??? ", Colors.GREEN, "")
            inputCommand = input()

            if(inputCommand == 'q'):
                break
            
            try:
                urlNumber = int(inputCommand)
                if urlNumber > 0 and urlNumber <= 10:
                    getUrl(list(jsonResult["items"])[urlNumber - 1]["link"])
                else:
                    printColoredText("!!! Unkown command", Colors.FAIL)
            except ValueError:
                printColoredText("!!! Unkown command", Colors.FAIL)


def getUrl(url):
    visited_urls.append(url)
    urlWithoutProtocol = url.replace("http://", "").replace("https://", "")
    [host, path] =  urlWithoutProtocol.split("/", 1) if "/" in urlWithoutProtocol else [urlWithoutProtocol, ""]

    with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as client:
        sslClient =  ssl.create_default_context().wrap_socket(client, server_hostname=host)

        # connect the client 
        sslClient.connect((host, 443))  
        
        # send request 
        request = "GET /" + path + " HTTP/1.1\r\naccept: text/html\r\nConnection: close\r\nHost:" + host + "\r\n\r\n"
        sslClient.send(request.encode())  

        response = b""
        while True:
            data = sslClient.recv(1024)
            response += data
            if not data or response.endswith(b'\r\n0\r\n\r\n'):
                break
        soup = BeautifulSoup(response[response.lower().find(b"<html"):], 'html.parser')
        print(os.linesep.join([s for s in soup.get_text().splitlines() if s]))

def goBack():
    if len(visited_urls) == 0:
        printColoredText("!!! Going back is not possible because you haven't visited any page yet.", Colors.FAIL)
        return
    backUrl = visited_urls.pop()
    forward_navigation_urls.append(backUrl)
    getUrl(backUrl)
    visited_urls.pop()

def goForward():
    if len(forward_navigation_urls) == 0:
        printColoredText("!!! Forward navigation is not possible, navigate backwards first", Colors.FAIL)
        return
    forwardUrl = forward_navigation_urls.pop()
    visited_urls.append(forwardUrl)
    getUrl(forwardUrl)
    forward_navigation_urls.pop()

def main():
    while(True):
        printColoredText(">>> ", Colors.BLUE, "")
        inputCommand = input()
        commandWords = inputCommand.split()

        if not isCommandValid(commandWords):
            continue

        if commandWords[1] == "-u":
            getUrl(commandWords[2])
            continue

        if commandWords[1] == "-s":
            search(commandWords[2:])
            continue
        
        if commandWords[1] == "-h":
            help()
            continue

        if commandWords[1] == "-b":
            goBack()
            continue
        
        if commandWords[1] == "-f":
            goForward()
            continue

def isCommandValid(commandWords):
    if len(commandWords) < 2:
        printColoredText("!!! Unknown or incorrect command, please check the 'go2web -h' to see all the available commands", Colors.FAIL)
        return False
    if commandWords[0] != "go2web":
        printColoredText("!!! First word of the command should be 'go2web' \nPlease check the 'go2web -h' to see all the available commands", Colors.FAIL)
        return False;
    if commandWords[1] not in KNOWN_FLAGS:
        printColoredText(f"!!! Unknown flag '{commandWords[1]}'\nPlease check the 'go2web -h' to see all the available commands", Colors.FAIL)
        return False; 
    if commandWords[1] == "-u":
        if len(commandWords) != 3:
            printColoredText("!!! Incomplete command, please check the 'go2web -h' to see all the available commands", Colors.FAIL)
            return False
        
        isUrlValid = validators.url(commandWords[2]) or validators.domain(commandWords[2])
        if not isUrlValid:
            printColoredText("!!! Incorrect URL, please check the URL and try again", Colors.FAIL)
            return False

    if commandWords[1] == "-h":
        if len(commandWords) > 2:
            printColoredText("!!! Incorrect command \nPlease check the 'go2web -h' to see all the available commands", Colors.FAIL)
            return False 
    
    if commandWords[1] == '-s':
        if len(commandWords) <= 2:
            printColoredText("!!! Incorrect command \nSearch command should contain a <search_tearm>", Colors.FAIL)
            return False         

    return True 

main()

# requirements
# validators
